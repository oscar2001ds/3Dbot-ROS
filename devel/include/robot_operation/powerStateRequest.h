// Generated by gencpp from file robot_operation/powerStateRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_OPERATION_MESSAGE_POWERSTATEREQUEST_H
#define ROBOT_OPERATION_MESSAGE_POWERSTATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_operation
{
template <class ContainerAllocator>
struct powerStateRequest_
{
  typedef powerStateRequest_<ContainerAllocator> Type;

  powerStateRequest_()
    : platform(false)
    , arm(false)  {
    }
  powerStateRequest_(const ContainerAllocator& _alloc)
    : platform(false)
    , arm(false)  {
  (void)_alloc;
    }



   typedef uint8_t _platform_type;
  _platform_type platform;

   typedef uint8_t _arm_type;
  _arm_type arm;





  typedef boost::shared_ptr< ::robot_operation::powerStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_operation::powerStateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct powerStateRequest_

typedef ::robot_operation::powerStateRequest_<std::allocator<void> > powerStateRequest;

typedef boost::shared_ptr< ::robot_operation::powerStateRequest > powerStateRequestPtr;
typedef boost::shared_ptr< ::robot_operation::powerStateRequest const> powerStateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_operation::powerStateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_operation::powerStateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_operation::powerStateRequest_<ContainerAllocator1> & lhs, const ::robot_operation::powerStateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.platform == rhs.platform &&
    lhs.arm == rhs.arm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_operation::powerStateRequest_<ContainerAllocator1> & lhs, const ::robot_operation::powerStateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_operation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_operation::powerStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_operation::powerStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_operation::powerStateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_operation::powerStateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_operation::powerStateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_operation::powerStateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_operation::powerStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9615bc8520f45afe11363618633070ec";
  }

  static const char* value(const ::robot_operation::powerStateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9615bc8520f45afeULL;
  static const uint64_t static_value2 = 0x11363618633070ecULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_operation::powerStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_operation/powerStateRequest";
  }

  static const char* value(const ::robot_operation::powerStateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_operation::powerStateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool platform\n"
"bool arm\n"
;
  }

  static const char* value(const ::robot_operation::powerStateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_operation::powerStateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.platform);
      stream.next(m.arm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct powerStateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_operation::powerStateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_operation::powerStateRequest_<ContainerAllocator>& v)
  {
    s << indent << "platform: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.platform);
    s << indent << "arm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.arm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_OPERATION_MESSAGE_POWERSTATEREQUEST_H
